name: "oci-fn-build"
permissions:
  contents: read
on:
  workflow_dispatch:
    inputs:
      OCI_FN_COMPARTMENT:
        description: Function compartment
        default: ocid1.compartment.oc1..aaaaaaaagpgm5kspbeahx2tnftgnvcz5l7crg3yyskdi7hexp63crnro46gq

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_FN_USER_NAME: ${{ secrets.OCI_FN_USER_NAME }}
      OCI_CLI_AUTH_TOKEN: ${{ secrets.OCI_CLI_AUTH_TOKEN }}
      OCI_FN_OCIR: ${{ secrets.OCI_FN_OCIR }}
      OCI_TENANCY_NAME: ${{ secrets.OCI_TENANCY_NAME }}
      OCI_FN_REGISTRY: ${{ secrets.OCI_FN_REGISTRY }}
      OCI_FN_API_URL: ${{ secrets.OCI_FN_API_URL }}
      VITE_MAPBOX_ACCESS_TOKEN: "${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}"
    steps:
      - uses: actions/checkout@v4

      - name: "Write Config & Key Files"
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=$OCI_CLI_USER" >> ~/.oci/config
          echo "fingerprint=$OCI_CLI_FINGERPRINT" >> ~/.oci/config
          echo "tenancy=$OCI_CLI_TENANCY" >> ~/.oci/config
          echo "region=$OCI_CLI_REGION" >> ~/.oci/config         
          echo "$OCI_CLI_KEY_CONTENT" >> ~/.oci/key.pem
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config

      - name: "Install OCI CLI"
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          export PATH=$PATH:/home/runner/bin
          # Removed exec -l $SHELL to avoid environment loss

      - name: "Fix Config File Permissions"
        run: |
          export PATH=$PATH:/home/runner/bin
          oci setup repair-file-permissions --file ~/.oci/key.pem
          oci setup repair-file-permissions --file ~/.oci/config

      - name: "Install Fn CLI"
        run: |
          curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh

      - name: "Debug: Print Non-Sensitive Env Vars"
        run: |
          if [ -z "$OCI_FN_USER_NAME" ]; then echo "OCI_FN_USER_NAME is empty"; else echo "OCI_FN_USER_NAME is set"; fi
          if [ -z "$OCI_CLI_AUTH_TOKEN" ]; then echo "OCI_CLI_AUTH_TOKEN is empty"; else echo "OCI_CLI_AUTH_TOKEN is set"; fi
          if [ -z "$OCI_FN_OCIR" ]; then echo "OCI_FN_OCIR is empty"; else echo "OCI_FN_OCIR is set"; fi
          printf "VITE_MAPBOX_ACCESS_TOKEN: %d\n" secrets.VITE_MAPBOX_ACCESS_TOKEN
          printf "VITE_MAPBOX_ACCESS_TOKEN: %d\n" ${{secrets.VITE_MAPBOX_ACCESS_TOKEN}}
          printf "VITE_MAPBOX_ACCESS_TOKEN: %d\n" "${{secrets.VITE_MAPBOX_ACCESS_TOKEN}}""

      - name: "Docker login"
        run: docker login -u "$OCI_FN_USER_NAME" -p "$OCI_CLI_AUTH_TOKEN" "$OCI_FN_OCIR"

      - name: "Setting up Fn context"
        run: |
          fn create context "$OCI_TENANCY_NAME" --provider oracle
          fn use context "$OCI_TENANCY_NAME"
          fn update context registry "$OCI_FN_REGISTRY"
          fn update context oracle.compartment-id "${{ inputs.OCI_FN_COMPARTMENT }}"
          fn update context api-url "$OCI_FN_API_URL"

      - name: "Build Image for OCI Function"
        run: fn build --verbose

      - name: "Push image to OCI Registry"
        run: fn push --verbose
